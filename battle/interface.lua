bt._safe_invoke_catch_errors = false

--- @brief invoke a script callback in a safe, sandboxed environment
--- @brief add non-interface global methods
function bt.BattleScene:_load_scene_interface(env)
    env.add_global_status = function(id)
        meta.assert_string(id)
        self:add_global_status(bt.GlobalStatus(id))
    end

    env.remove_global_status = function(id)
        meta.assert_string(id)
        self:remove_global_status(bt.GlobalStatus(id))
    end
end

--- @class bt.EntityInterface
function bt.EntityInterface(scene, entity)
    meta.assert_isa(scene, bt.BattleScene)
    meta.assert_isa(entity, bt.BattleEntity)

    local self, metatable = {}, {}
    setmetatable(self, metatable)

    metatable.type = "bt.EntityInterface"
    metatable.scene = scene
    metatable.original = entity

    self.set_hp = function(self, new_value)
        meta.assert_entity_interface(self)
        meta.assert_number(new_value)

        if new_value < 0 then
            rt.warning("In EntityInterface.set_hp: value `" .. tostring(new_value) .. "` is smaller than 0")
            new_value = clamp(new_value, 0)
        end

        local entity = getmetatable(self).original
        local scene = getmetatable(self).scene

        if new_value == 0 then
            scene:kill(entity)
        else
            local difference = entity:get_hp_current() - clamp(new_value, 0, entity:get_hp_base())
            if difference > 0 then
                scene:add_hp(entity, difference)
            else
                scene:reduce_hp(entity, math.abs(difference))
            end
        end
    end

    self.add_hp = function(self, offset)
        meta.assert_entity_interface(self)
        meta.assert_number(offset)

        local entity = getmetatable(self).original
        local scene = getmetatable(self).scene

        if offset > 0 then
            scene:add_hp(entity, offset)
        elseif offset < 0 then
            scene:reduce_hp(entity, math.abs(offset))
        end
    end

    self.reduce_hp = function(self, offset)
        meta.assert_entity_interface(self)
        meta.assert_number(offset)

        local entity = getmetatable(self).original
        local scene = getmetatable(self).scene

        if offset < 0 then
            scene:add_hp(entity, offset)
        elseif offset > 0 then
            scene:reduce_hp(entity, math.abs(offset))
        end
    end

    self.add_status = function(self, id)
        meta.assert_entity_interface(self)
        meta.assert_string(id)

        local entity = getmetatable(self).original
        local scene = getmetatable(self).scene
        scene:add_status(entity, bt.Status(id))
    end

    self.remove_status = function(self, id)
        meta.assert_entity_interface(self)
        meta.assert_string(id)

        local entity = getmetatable(self).original
        local scene = getmetatable(self).scene
        scene:remove_status(entity, bt.Status(id))
    end

    self.list_statuses = function(self)
        meta.assert_entity_interface(self)
        local entity = getmetatable(self).original
        local scene = getmetatable(self).scene

        local out = {}
        for status in values(entity) do
            table.insert(bt.StatusInterface(scene, entity, status))
        end
        return out
    end

    -- autogenerated forwarding
    for forward in range(
        "get_id",
        "get_name",
        "get_hp",
        "get_hp_base",
        "get_attack",
        "get_attack_base",
        "get_defense",
        "get_defense_base",
        "get_speed",
        "get_speed_base",
        "get_is_dead",
        "get_is_knocked_out",
        "get_is_alive"
    ) do
        self[forward] = function(self)
            local entity = getmetatable(self).original
            return entity[forward](entity)
        end
    end

    -- autogenerated getters
    metatable.getter_mapping = {
        ["id"] = self.get_id,
        ["name"] = self.get_id,
        ["hp"] = self.get_hp_current,
        ["hp_current"] = self.get_hp_current,
        ["hp_base"] = self.get_hp_base,
    }

    metatable.__index = function(self, key)
        local getter = getmetatable(self).getter_mapping[key]
        if getter ~= nil then
            return getter(self)
        else
            local out = rawget(self, key)
            if out == nil then
                rt.warning("In bt.EntityInterface:__index: trying to access property `" .. key .. "` of Entity `" .. getmetatable(self).original:get_id() .. "`, but it does not exist")
            end
            return out
        end
    end

    return self
end



-- generate meta assertions
for which in values({
    {"entity", "bt.EntityInterface"},
    {"status", "bt.StatusInterface"},
    {"equip", "bt.EquipInterface"},
    {"consumable", "bt.ConsumableInterface"},
    {"global_status", "bt.GlobalStatusInterface"},
    {"move", "bt.MoveInterface"}
}) do
    local is_name = "is_" .. which[1] .. "_interface"

    --- @brief get whether type is interface
    meta["is_" .. which[1] .. "_interface"] = function(x)
        local metatable = getmetatable(x)
        return metatable ~= nil and metatable.type == which[2]
    end

    --- @brief throw if type is not interface
    meta["assert_" .. which[1] .. "_interface"] = function(x)
        if not meta[is_name](x) then
            rt.error("In " .. debug.getinfo(2, "n").name .. ": Expected `" .. which[2] .. "`, got `" .. meta.typeof(x) .. "`")
        end
    end
end

